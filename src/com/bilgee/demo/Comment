Static är ett nyckelord. Static används för att skapa medlemsvariabler och metoder som delas av
alla instanser av klassen snarare än att vara specifika för varje objekt.
En static klass i Java kan ändra sina instansvariabler under programkörning.
Statisk referens pekar alltid på samma plats. Om någon ändrar på ett statisk värde så
ändras överallt. Kallas också "Global Scope"
Static metod, kräver inte instansiering för att anropa metod från annan klass.

Lektion-2 List, LinkedList och arrayList
List är ett interface. Interface kommer med metoder som vi kan arbeta direkt med. Interfaces har mindre
funktionalitet redo än klasser. List kan implementera till båda array och LinkedList. Det är ett exempel av
polymorphism.

LinkedList är en array som ärver från List. LinkedList har pointers och detta hjälper att
elementen håller koll på sina grannar alltså kan ha koll på framme och nästa data.
Början och slutet pekar på NULL. Eftersom det finns extra pekare i listan då kräver den ytterligare
minnesutrymme för att lagra denna pekare tillsammans med nästa pekare och dataobjekt.Bra för att
lägga till eller ta bort element från början, mitten eller slutet av listan. Valet mellan array och linkedList
beror på vilken typ av operationer du utför mest i din kod.

ArrayList
ArrayList är en dynamisk lista där du kan lagra och hantera data av samma typ. Den kan ändra storlek automatisk
när man lägger till eller ta bort element. ArrayList använder vi för att hålla ordning och snabb tillgång till element
med hjälp av deras position. InitialCapacity har arrayList (x1,5). Vi kan sätta storleken från början om vi vet om storleken
snabbare och mindre minne. support null elements.

Lektion_3 Menu Switch
Switch är en konstruktör som hjälper att fatta beslut baserat på olika värden för en variabel.
Instansiera en variabel och jämför dess värde med olika fall(case). Om värdet matchar ett av fallen, utförs
den kod som hör till det fallet.

Menu´s Why?
 läsbarhet, underhåll, tydligt, undviker långa fula if/else satser
enklare kontroll, lättare att debuga, break, default, snabbare exekvering. Man kan kombinera med if satser.
Nackdelar:
Inte optimalt om vi bara har 2 cases. Om switch utan breaks blir det falla igenom nästa rad.
Kan bli förvirrande om vi checkar mot objekt.

Lambda är ett uttryck och som en snabb och enkel sätt att skapa små bitar av kod, oftast för att göra
något specifikt. Det är som att skriva ner en kort instruktion för datorn att följa. Lambda används
oftast när du behöver en bit kod för att skicka till en annan del av programmet för att göra något, att sortera
eller filtrera data.
Enhanced switch använder lambda uttryck ->

switch(){
case1:
    sout
    break;

int dayOfTheWeek = 1;
switch(dayOfTheWeek){
case 1,2,3,4,5 -> sout("Weekday");
case 6,7 -> sout("Weekend")
default -> sout("NTA");

if/else - svårt att läsa, underhålla, ändra implementation och debugging.
 1: if() {}
 2: if() {} else {}
Lektion-4 OOP Deep
OOP-Class,Objekt,inheritance-arv,abstraktion,encapsulation,polymorphism
>Visibility modifiers och access modifiers
public,protected,private,no modifier,package
Inom klaas public och no modifier går funka.
Inom method kan funka alla modifier.

Vad är en subklass?
Det är en typ av klass som är barn till en annan klass. Att använda subklasser gör det möjligt att organisera och strukturera
koden på ett sätt som gör den lättare att förstå och underhålla. Det ger också möjlighet att återanvända kod eftersom
subklassen kan ärva egenskaper och funktioner från överklassen.

Getter Setter
Det är 2 specialtyper av metoder i programmering, och de används för att få tillgång till och ändra värden i en
klass på ett kontrollerat sätt. Om vi vill hämta ut alla getter så använder man toString metoden.

toString
Det är en metod som används för att få en textuell representation av ett objekt.

Constructor
Det är en special funktion som används när du skapar ett objekt och det är instruktion som säger hur ett objekt
ska skapas.

Polymorphism
Det handlar om att objekt av olika typer kan användas på ett flexibelt sätt. Även om vi har olika typer av
saker eller objekt, kan vi använda dem på ett liknande sätt om de har något gemensamt relation. Med abstraktion och ärv
IAnimal superclass -> dog and cat implements samma metod. utföra något unikt till exempel dog och cat har samma metod
men dem använder metoderna på egna sätt.
Till exempel. List<String> test = new ArrayList<>(); och array kan bli LinkedList<>();
List är ett interface.
Om vi har ett list som förälder och den är abstrakt då vet vi att alltid pekar på list.

Med extends utökar funktionalitet och attribut.
Super är föräldern. I ett förhållande till familj och arv , så är super något som hänvisar till originalet
som vi ärver från.

WriteFile
Vad kan gå fel?
Felhantering preparation
(IO Exception)
-file or directory permission issue
-insufficient disk space
-hardware failures
-Disk full errors
-Other low-level I/O errors
-File not found
-unsupported encoding
-file already exists
-network issues
try catch

Regex
Regex är ett uttryck som ett magiskt mönster du kan använda när du letar efter något specifikt i en text.
Användningen av Regex gör det enklare att hitta och hantera info i texter och är användbart när behöver göra
avancerad sökning eller bearbetning av textdata.

Final
Final är som att ett nyckelord och det är slutligt,Tilldelas ett värde endast en gång
Går ej att ändra på
Synkronisering behövs ej
Abstrakt klass attribut är inte final-Går att fixa
Bra för Dependency Injection



Enum
Enum är en klass och listar och räknar upp saker. Final och enum går i hand i hand.
Skillnaden är final används för att göra något oföränderligt, medan Enum används
för att lista och räkna upp på ett begränsat och tydligt sätt.

vad är en fördel med att använda params i Java-metoder?
Det möjliggör att en metod kan ta ett varierande antal argument.